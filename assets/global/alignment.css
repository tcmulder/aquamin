/**
 * Page layout alignments
 *
 * These reset some default WordPress layout quirks
 * that make alignment inconsistent.
 */

/**
 * Fix extreme default background padding.
 *
 * By default, WordPress adds HUGE padding values to things with backgorund
 * colors, which is weird. This removes the top and bottom, then also removes
 * the left and right (unless it's using the .has-global-padding value). Note
 * further that any manually-added inline padding settings on a block will
 * properly override the following resets.
 */
.has-background.has-background {
	padding-top: 0;
	padding-bottom: 0;
	&:not(.has-global-padding) {
		padding-left: 0;
		padding-right: 0;
	}
}

/**
 * Fix block cover padding.
 * 
 * By default, WordPress adds padding:1em all around blocks,
 * so we remove the tops and add root padding to the sides.
 */
.wp-block-cover.wp-block-cover {
	padding: 0 var(--wp--style--root--padding-right) 0
		var(--wp--style--root--padding-left);
}

/**
 * Fix .alignfull blocks within cover blocks.
 * 
 * Blocks within the cover block's content container div
 * don't respect .alignfull without this. Note that this
 * doesn't work with manual padding on the cover block,
 * since WordPress doesn't generate the appropriate code.
 */
.wp-block-cover__inner-container {
	.wp-block-cover:not([style*="padding-left"]) & > .alignfull {
		margin-left: calc(-1 * var(--wp--style--root--padding-left));
	}
	.wp-block-cover:not([style*="padding-right"]) & > .alignfull {
		margin-right: calc(-1 * var(--wp--style--root--padding-right));
	}
}

/**
 * Force align stretch.
 * 
 * When e.g. columns are set to stretch, they do... but their immediate
 * children do not, which sorta defeats the purpose. This forces immediate
 * children of stretched blocks to mimic the stretch also.
 */
.is-vertically-aligned-stretch > * {
	height: 100%;
}

/**
 * Fix nested .alignfull.
 *
 * If you set padding on a container, it gets a dynamic class like
 * .wp-container-core-group-is-layout-17 > .alignfull { margin-left: calc(50px -1) }
 * in order to stretch full width. but, if you leave it to the default .has-global-padding,
 * WordPress currently sets this to 0px, which causes inner .alignfull to recieve e.g.
 * margin-left: calc(0px -1) so it doesn't extend. The following overrides that.
 */
.has-global-padding:not(.alignfull) {
	&:not([style*="padding-left"]) > .alignfull {
		margin-left: calc(var(--wp--style--root--padding-left) * -1);
	}
	&:not([style*="padding-right"]) > .alignfull {
		margin-right: calc(var(--wp--style--root--padding-right) * -1);
	}
}

/**
 * Adjust layout constrained's forced top margins.
 * 
 * The setting theme.json.styles.spacing.blockGap is used for
 * all default gap spacing (like between column blocks), but
 * is also used between all adjacent root-level blocks, meaning
 * we have to manually set each root block's top margin to our
 * desired value, manually. This lets us apply our desired default.
 */
.torso.is-layout-constrained,
.is-root-container.is-layout-constrained {
	& > :not([style*="margin-top"]) {
		margin-block-start: unset; /* or use something like var(--sp-s-rem) */
	}
}

/**
 * Add default top/bottom margins to first and last block.
 * 
 * This allows us to add default space under a sticky nav and/or above
 * the footer automatically. We can override this by setting a margin
 * manually for the first and/or last block through the block editor.
 */
.torso.is-layout-constrained {
	& > *:not([style*="margin-top"]):first-child {
		margin-top: var(--h-menu); /* space below main menu */
	}
	& > *:not([style*="margin-bottom"]):last-child {
		margin-bottom: var(--sp-s-rem); /* space above footer */
	}
}

/*
 * Add padding if .has-global-padding
 * 
 * Without this, WordPress adds a convoluted set of rules that removes the effects
 * of global padding in most cases. This adds them back in.
 */
.has-global-padding
	:where(
		:not(.alignfull.is-layout-flow)
			> .has-global-padding:not(.wp-block-block, .alignfull)
	) {
	&.has-global-padding {
		padding-right: var(--wp--style--root--padding-right);
		padding-left: var(--wp--style--root--padding-left);
	}
}
